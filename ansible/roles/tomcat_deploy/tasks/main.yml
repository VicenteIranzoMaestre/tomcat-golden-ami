---
# Detect Tomcat install (9 vs 10) and paths
- name: Autodetect Tomcat paths when not provided
  block:
    - name: Probe tomcat10 webapps
      ansible.builtin.stat:
        path: /var/lib/tomcat10/webapps
      register: st10
    - name: Probe tomcat9 webapps
      ansible.builtin.stat:
        path: /var/lib/tomcat9/webapps
      register: st9
    - name: Set autodetected paths and major version
      ansible.builtin.set_fact:
        _auto_webapps: >-
          {{ '/var/lib/tomcat10/webapps' if st10.stat.exists else
             ('/var/lib/tomcat9/webapps' if st9.stat.exists else '') }}
        _auto_service: >-
          {{ 'tomcat10' if st10.stat.exists else
             ('tomcat9' if st9.stat.exists else '') }}
        _tomcat_major: >-
          {{ '10' if st10.stat.exists else
             ('9' if st9.stat.exists else '') }}
  when: (tomcat_webapps_dir | default('') | length) == 0 or (tomcat_service_name | default('') | length) == 0


- name: Finalize service and webapps dir
  ansible.builtin.set_fact:
    _webapps_dir: "{{ (tomcat_webapps_dir | default('') | length > 0) | ternary(tomcat_webapps_dir, (_auto_webapps | default(''))) }}"
    _service_name: "{{ (tomcat_service_name | default('') | length > 0) | ternary(tomcat_service_name, (_auto_service | default(''))) }}"

- name: Derive tomcat major from service name if needed
  ansible.builtin.set_fact:
    _tomcat_major: >-
      {{ '10' if (_service_name | default('') | regex_search('tomcat10')) else
         ('9'  if (_service_name | default('') | regex_search('tomcat9'))  else (_tomcat_major | default(''))) }}

- name: Fail if we couldn't autodetect paths
  ansible.builtin.assert:
    that:
      - _webapps_dir | length > 0
      - _service_name | length > 0
    fail_msg: "Could not determine Tomcat install. Set tomcat_webapps_dir and tomcat_service_name explicitly."

# Pick the correct WAR vars (prefer per-version, fallback to generic)
- name: Select WAR inputs based on Tomcat major
  ansible.builtin.set_fact:
    _sel_war_src: >-
      {% if _tomcat_major == '10' and (tomcat10_war_src | default('')) | length > 0 %}{{ tomcat10_war_src }}
      {% elif _tomcat_major == '9' and (tomcat9_war_src | default('')) | length > 0 %}{{ tomcat9_war_src }}
      {% elif (tomcat_war_src | default('')) | length > 0 %}{{ tomcat_war_src }}
      {% else %}{% endif %}
    _sel_war_url: >-
      {% if _tomcat_major == '10' and (tomcat10_war_url | default('')) | length > 0 %}{{ tomcat10_war_url }}
      {% elif _tomcat_major == '9' and (tomcat9_war_url | default('')) | length > 0 %}{{ tomcat9_war_url }}
      {% elif (tomcat_war_url | default('')) | length > 0 %}{{ tomcat_war_url }}
      {% else %}{% endif %}
    _sel_checksum: >-
      {% if _tomcat_major == '10' and (tomcat10_war_checksum | default('')) | length > 0 %}{{ tomcat10_war_checksum }}
      {% elif _tomcat_major == '9' and (tomcat9_war_checksum | default('')) | length > 0 %}{{ tomcat9_war_checksum }}
      {% elif (tomcat_war_checksum | default('')) | length > 0 %}{{ tomcat_war_checksum }}
      {% else %}{% endif %}

- name: Validate exactly one WAR source is defined for the detected Tomcat
  ansible.builtin.assert:
    that:
      - (_sel_war_src | length > 0) or (_sel_war_url | length > 0)
      - not ( (_sel_war_src | length > 0) and (_sel_war_url | length > 0) )
    fail_msg: >-
      Provide either *_war_src or *_war_url (not both) for Tomcat {{ _tomcat_major }}.
      Looked at tomcat{{ _tomcat_major }}_* first, then generic tomcat_war_*.

# Compute names/paths
- name: Compute deployment targets
  ansible.builtin.set_fact:
    _deploy_name: >-
      {{ (tomcat_context_path | default('')) | length > 0
          | ternary(tomcat_context_path, tomcat_app_name) }}
    _war_filename: >-
      {{ ((tomcat_context_path | default('')) | length > 0
           and tomcat_context_path == 'ROOT')
           | ternary('ROOT.war', ((tomcat_context_path | default('')) | length > 0
                                   | ternary(tomcat_context_path, tomcat_app_name)) ~ '.war') }}
    _war_final_path: "{{ _webapps_dir }}/{{ _war_filename }}"
    _tmp_war_path: "/tmp/{{ _war_filename }}"

- name: Ensure webapps directory exists
  ansible.builtin.file:
    path: "{{ _webapps_dir }}"
    state: directory
    owner: "{{ tomcat_owner }}"
    group: "{{ tomcat_group }}"
    mode: "0755"

# Optional: stop Tomcat before replacing the WAR (avoids file locks on some setups)
- name: Stop Tomcat before deploy (optional)
  ansible.builtin.service:
    name: "{{ _service_name }}"
    state: stopped
  when: stop_before_deploy | bool

- name: Fetch WAR from URL (if selected)
  ansible.builtin.get_url:
    url: "{{ _sel_war_url }}"
    dest: "{{ _tmp_war_path }}"
    checksum: "{{ _sel_checksum if (_sel_checksum | length > 0) else omit }}"
    mode: "0644"
  when: _sel_war_url | length > 0

- name: Copy WAR from controller (if selected)
  ansible.builtin.copy:
    src: "{{ _sel_war_src }}"
    dest: "{{ _tmp_war_path }}"
    mode: "0644"
    checksum: "{{ _sel_checksum if (_sel_checksum | length > 0) else omit }}"
  when: _sel_war_src | length > 0

- name: Remove exploded app directory (if exists and requested)
  ansible.builtin.file:
    path: "{{ _webapps_dir }}/{{ _deploy_name }}"
    state: absent
  when: clean_exploded_on_update

- name: Deploy WAR into webapps
  ansible.builtin.copy:
    src: "{{ _tmp_war_path }}"
    dest: "{{ _war_final_path }}"
    owner: "{{ tomcat_owner }}"
    group: "{{ tomcat_group }}"
    mode: "0644"
    backup: true
  notify: restart tomcat (deploy)

- name: Clean temp WAR
  ansible.builtin.file:
    path: "{{ _tmp_war_path }}"
    state: absent

# # Optional: start Tomcat again if we stopped it earlier
# - name: Start Tomcat after deploy (if previously stopped)
#   ansible.builtin.service:
#     name: "{{ _service_name }}"
#     state: started
#     enabled: true
#   when: stop_before_deploy | bool

# # Optional: health check
# - name: Compute healthcheck URL (if not provided)
#   ansible.builtin.set_fact:
#     _health_url: >-
#       {{ (healthcheck_url | default('')) | length > 0
#          | ternary(healthcheck_url,
#                    'http://localhost:8080/' ~ ('' if _deploy_name == 'ROOT' else _deploy_name ~ '/')) }}
#   when: healthcheck_enabled | bool

# - name: Wait for app to be healthy
#   ansible.builtin.uri:
#     url: "{{ _health_url }}"
#     status_code: "{{ healthcheck_status_code | default(200) }}"
#     return_content: false
#     validate_certs: true
#   register: hc
#   retries: "{{ healthcheck_retries | default(30) }}"
#   delay: "{{ healthcheck_delay | default(2) }}"
#   until: hc.status == (healthcheck_status_code | default(200))
#   when: healthcheck_enabled | bool
